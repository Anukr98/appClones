{"version":3,"sources":["firebase.js","StateProvider.js","components/SidebarChat.js","Sidebar.js","Chat.js","reducer.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SidebarChat","id","name","addNewChat","useState","messages","setMessages","user","seed","setSeed","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","prompt","add","className","to","Avatar","src","message","Sidebar","chats","setChats","photoURL","IconButton","DonutLarge","Chat","MoreVert","Search","type","placeholder","chat","key","input","setInput","chatId","useParams","chatName","setChatName","Date","length","timestamp","toDate","toUTCString","SearchOutlined","AttachFile","displayName","InsertEmoticon","action","autoComplete","onChange","e","target","preventDefault","FieldValue","serverTimestamp","Mic","actionTypes","state","console","log","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29a53fed.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBhaQ4m1_f_b-BFz2gSU_OwbHytPO-u1JE\",\n  authDomain: \"whatsapp-clone-788d2.firebaseapp.com\",\n  databaseURL: \"https://whatsapp-clone-788d2.firebaseio.com\",\n  projectId: \"whatsapp-clone-788d2\",\n  storageBucket: \"whatsapp-clone-788d2.appspot.com\",\n  messagingSenderId: \"936047143665\",\n  appId: \"1:936047143665:web:db4762250f27bbf7765750\",\n  measurementId: \"G-MYJ87S41H5\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nconst auth = firebase.auth();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport default db\nexport { auth , provider }","import React , { createContext , useContext , useReducer } from 'react'\n\nexport const StateContext = createContext()\n\nexport const StateProvider = ( {reducer , initialState , children} ) => (\n    <StateContext.Provider \n        value = { useReducer(reducer , initialState) }\n    >\n        {children}\n    </StateContext.Provider>\n)\n\nexport const useStateValue = () => useContext(StateContext)","import { Avatar } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useEffect } from 'react'\nimport '../css/sidebarChat.css'\nimport db from '../firebase'\nimport { useStateValue } from '../StateProvider'\n\nfunction SidebarChat( { id , name , addNewChat } ) {\n\n    const [messages, setMessages] = useState('')\n    const [ {user} , dispatch ] = useStateValue()\n    const [seed, setSeed] = useState('')\n\n    useEffect( () => {\n        if (id){\n            db.collection('chats').doc(id).collection('messages').orderBy('timestamp' , 'desc').onSnapshot(snapshot => (\n                setMessages(snapshot.docs.map(doc =>\n                        doc.data()\n                    ))\n            ))\n        }\n    } , [id])\n\n    useEffect( () => {\n        setSeed(Math.floor(Math.random() * 5000))\n    } , [] )\n\n    const createChat = () => {\n        const name = prompt('Enter your name')\n        \n        if( name ) {\n            db.collection('chats').add({\n                name : name\n            })\n        }\n    }\n\n    return !addNewChat ? (\n        <Link to = {`/chats/${id}`}>        \n            <div className = 'sidebarChat'>\n                <Avatar \n                    src = {`https://avatars.dicebear.com/api/human/${seed}.svg`}\n                />\n\n                <div className=\"sidebarChat__info\">\n                    <h2> {name} </h2>\n                    <p>{messages[0]?.message}</p>\n                </div>\n            </div>\n        </Link>\n    ) : (\n        <div onClick = {createChat} className = 'sidebarChat'>\n            <h2>Add New Chat</h2>\n        </div>\n    )\n}\n\nexport default SidebarChat\n","import { Avatar, IconButton } from '@material-ui/core'\nimport React from 'react'\nimport './css/sidebar.css'\nimport {\n    DonutLarge ,\n    Chat , \n    MoreVert,\n    Search\n} from '@material-ui/icons'\n\nimport ChatField from './components/SidebarChat'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\nimport db from './firebase'\nimport { useStateValue } from './StateProvider'\n\nfunction Sidebar() {\n\n    const [ {user} , dispatch ] = useStateValue()\n    const [chats, setChats] = useState([])\n\n    useEffect( () => {\n        db.collection('chats').onSnapshot( snapshot => (\n            setChats(snapshot.docs.map( doc => ({\n                id : doc.id ,\n                data : doc.data(),\n            })))\n        ))\n    } , [] )\n\n    return (\n        <div className = 'sidebar'> \n\n            <div className=\"sidebar__header\">\n                <Avatar src = {user?.photoURL} />\n\n                <div className=\"sidebar__headerRight\">\n                    <IconButton> <DonutLarge /> </IconButton>\n                    <IconButton> <Chat /> </IconButton>\n                    <IconButton> <MoreVert /> </IconButton>\n                    \n                </div>\n            </div>\n\n            <div className=\"sidebar__search\">\n                <div className=\"sidebar__searchContainer\">\n                    <Search />\n                    <input type=\"text\" placeholder = 'Search or start new chat' />\n                </div>\n            </div>\n\n            <div className=\"sidebar__chats\">\n                <ChatField addNewChat/>\n                {chats.map( chat => (\n                    <ChatField \n                        key = {chat.id}\n                        id = {chat.id}\n                        name = {chat.data.name}\n                    />\n                ))}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import { Avatar, IconButton } from '@material-ui/core'\nimport React , { useEffect, useState } from 'react'\nimport './css/Chat.css'\n\nimport {\n    AttachFile ,\n    MoreVert ,\n    SearchOutlined ,\n    InsertEmoticon , \n    Mic\n} from '@material-ui/icons'\n\nimport { useParams } from 'react-router-dom'\nimport db from './firebase'\nimport { useStateValue } from './StateProvider'\nimport firebase from 'firebase'\n\nfunction Chat() {\n\n    const [input, setInput] = useState('')\n    const { chatId } = useParams()\n    const [chatName, setChatName] = useState('')\n    const [messages, setMessages] = useState([])\n    const [ {user} , dispatch ] = useStateValue()\n    const [seed, setSeed] = useState('')\n\n    useEffect( () => {\n        \n        if(chatId){\n            db.collection('chats').doc(chatId).onSnapshot((snapshot) =>\n                setChatName(snapshot.data().name)\n            )\n\n            db.collection('chats').doc(chatId).collection('messages').orderBy('timestamp' , 'asc').onSnapshot(snapshot => \n                setMessages(snapshot.docs.map(doc =>\n                    doc.data()    \n                ))\n            )\n        }\n\n    } , [chatId])\n\n    useEffect( () => {\n        setSeed(Math.floor(Math.random() * 5000))\n    } , [chatId] )\n\n    const sendMessage = (e) => {\n        e.preventDefault()\n        db.collection('chats').doc(chatId).collection('messages').add({\n            name : user.displayName ,\n            timestamp : firebase.firestore.FieldValue.serverTimestamp(),\n            message : input\n        })\n        setInput('')\n    }\n\n    return (\n        <div className = 'chat'>\n            \n            <div className=\"chat__header\">\n                <Avatar \n                    src = {`https://avatars.dicebear.com/api/human/${seed}.svg`}\n                />\n\n                <div className=\"chat__headerInfo\">\n                    <h3>{chatName}</h3>\n                    <p>Last seen at {new Date(messages[messages.length -1]?.timestamp?.toDate()).toUTCString()}</p>\n                    \n                </div>\n\n                <div className=\"chat__headerRight\">\n                    <IconButton> <SearchOutlined /> </IconButton>\n                    <IconButton> <AttachFile /> </IconButton>\n                    <IconButton> <MoreVert /> </IconButton>\n                </div>\n            </div>\n\n            <div className=\"chat__body\">\n                {\n                    messages.map(message => (\n                        <p className= {`chat__message ${message.name === user.displayName && 'chat__receiver'}`} >\n                            <span className = 'chat__name'>{message.name}</span>\n                            {message.message}\n                            <span className = 'chat__timestamp'>{ new Date(message.timestamp?.toDate()).toUTCString() }</span>\n                        </p>\n                    ))\n                }\n            </div>\n\n            <div className=\"chat__footer\">\n                <InsertEmoticon />\n\n                <form action=\"\">\n                    <input \n                        type=\"text\" \n                        autoComplete = 'false' \n                        placeholder = 'Type a message'\n                        value = {input}\n                        onChange = { e => setInput(e.target.value) }\n                    />\n                    <button type = 'submit' onClick = {sendMessage} >Send a message</button>\n                </form>\n\n                <Mic />\n            </div>\n\n        </div>\n    )\n}\n\nexport default Chat\n","export const initialState = {\n    user : null,\n}\n\nexport const actionTypes = {\n    SET_USER : 'SET_USER',\n}\n\nconst reducer = (state , action) => {\n    console.log(action)\n\n    switch(action.type) {\n\n        case actionTypes.SET_USER :\n            return {\n                ...state,\n                user : action.user\n            }\n        \n            default :\n                return state\n    }\n}\n\nexport default reducer","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport '../css/login.css'\nimport { auth , provider } from '../firebase'\nimport { actionTypes } from '../reducer'\nimport { useStateValue } from '../StateProvider'\n\nfunction Login() {\n\n    const [ {} , dispatch ] = useStateValue()\n\n    const signIn = () => {\n        auth.signInWithPopup(provider).then(result => {\n                dispatch({\n                    type : actionTypes.SET_USER,\n                    user : result.user\n                })\n        }).catch(error => alert(error.message))\n    }\n\n    return (\n        <div className = 'login'>\n            <div className=\"login__container\">\n                <img \n                    src=\"https://i.pinimg.com/originals/79/dc/31/79dc31280371b8ffbe56ec656418e122.png\" \n                    alt=\"\"\n                />\n\n                <div className=\"login__text\">\n                    <h1>Sign in to WhatsApp</h1>\n                </div>\n\n                <Button onClick = {signIn} className = 'button'>\n                    Sign in with Google\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar'\nimport Chat from './Chat'\nimport { \n  BrowserRouter as Router,\n  Switch ,\n  Route\n} from 'react-router-dom'\n\nimport Login from './components/Login'\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n\n  const [ {user} , dispatch] = useStateValue()\n\n  return (\n    <div className=\"app\">\n\n      {!user ? <Login />\n      : (\n          <div className=\"app__body\">\n          \n            <Router>\n              <Switch>\n                \n                <Route path = '/chats/:chatId'>\n                  <Sidebar />   \n                  <Chat />\n                </Route>\n                <Route path = '/'>\n                  <Sidebar /> \n                  <Chat />\n                </Route>\n              </Switch>\n            </Router>\n\n          </div>\n      )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer , { initialState } from './reducer'\nimport { StateProvider } from './StateProvider'\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <StateProvider \n      initialState = {initialState} \n      reducer = {reducer}\n    >\n      <App />\n    </StateProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}